@use "styles.scss" as *;

.arrow {
  --arrowDistanceFromEdge: 3%;
  --animationLoopDuration: 0.9s;
  --animationLoopDistance: 10;
  --slideInDelay: 0.4s; // delay until after paging finishes
  --slideInDuration: 0.15s;
  --animationEasing: ease-in-out;
  --padding: 24;

  position: absolute;
  top: calc(33.5% - relativePx(var(--padding)));
  padding: relativePx(var(--padding));
  width: auto;
  height: relativePx(120);
  z-index: 10;
  pointer-events: all;

  filter: drop-shadow(0 0 3px rgba(0, 0, 0, 0.15));
  animation-play-state: paused;
  transition:
    left var(--slideInDuration) ease-out var(--slideInDelay),
    right var(--slideInDuration) ease-out var(--slideInDelay);

  // Prevent dragging/selecting
  -webkit-user-drag: none; // For WebKit browsers like Chrome, Safari
  user-drag: none; // Standard property
  -moz-user-select: none; // For Firefox
  -ms-user-select: none; // For Internet Explorer/Edge
  user-select: none; // Standard property

  &.left {
    left: calc(relativePx(-100) - relativePx(var(--padding)));
    transform: scaleX(-1);
    animation: arrowLeft var(--animationLoopDuration) var(--animationEasing)
      infinite;

    &.visible {
      left: calc(var(--arrowDistanceFromEdge) - relativePx(var(--padding)));
      animation-play-state: running;
    }
  }

  &.right {
    right: calc(relativePx(-100) - relativePx(var(--padding)));
    animation: arrowRight var(--animationLoopDuration) var(--animationEasing)
      infinite;

    &.visible {
      right: calc(var(--arrowDistanceFromEdge) - relativePx(var(--padding)));
      animation-play-state: running;
    }
  }

  @keyframes arrowLeft {
    0%,
    100% {
      transform: translateX(0) scaleX(-1);
    }
    30% {
      transform: translateX(calc(-1 * relativePx(var(--animationLoopDistance))))
        scaleX(-1);
    }
  }

  @keyframes arrowRight {
    0%,
    100% {
      transform: translateX(0);
    }
    30% {
      transform: translateX(relativePx(var(--animationLoopDistance)));
    }
  }
}
